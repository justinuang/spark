/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql

import org.apache.spark.sql.{functions => F}
import org.apache.spark.api.python.PythonBroadcast
import org.apache.spark.broadcast.Broadcast
import org.apache.spark.sql.execution.EvaluatePythonUtils
import org.apache.spark.sql.test.SharedSQLContext
import org.apache.spark.sql.test.SQLTestData._
import java.util.ArrayList
import java.util.HashMap

import org.apache.spark.sql.types.DataTypes

private case class MyType(f1: String, f2: String, f3: String, f4: String)

class PythonOptimizations extends QueryTest with SharedSQLContext {
  import testImplicits._

  def toBytes(xs: Int*): Array[Byte] = xs.map(_.toByte).toArray

  test("built-in fixed arity expressions") {
    val df = sqlContext.createDataFrame(List(
      MyType("a", "b", "c", "d"),
      MyType("a", "b", "c", "d"),
      MyType("a", "b", "c", "d"),
      MyType("a", "b", "c", "d")
    )).repartition(1)

    val upperCommand = toBytes(128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105, 111, 110, 10, 113, 0, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117, 110, 99, 10, 113, 1, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105, 99, 107, 108, 101, 10, 95, 98, 117, 105, 108, 116, 105, 110, 95, 116, 121, 112, 101, 10, 113, 2, 85, 8, 67, 111, 100, 101, 84, 121, 112, 101, 113, 3, 133, 113, 4, 82, 113, 5, 40, 75, 2, 75, 2, 75, 3, 75, 19, 85, 25, 116, 0, 0, 135, 0, 0, 135, 1, 0, 102, 2, 0, 100, 1, 0, 134, 0, 0, 124, 1, 0, 131, 2, 0, 83, 113, 6, 78, 104, 5, 40, 75, 1, 75, 1, 75, 3, 75, 19, 85, 19, 136, 1, 0, 106, 0, 0, 136, 0, 0, 124, 0, 0, 140, 0, 0, 131, 1, 0, 83, 113, 7, 78, 133, 113, 8, 85, 10, 116, 111, 73, 110, 116, 101, 114, 110, 97, 108, 113, 9, 133, 113, 10, 85, 1, 120, 113, 11, 133, 113, 12, 85, 78, 47, 85, 115, 101, 114, 115, 47, 106, 117, 97, 110, 103, 47, 99, 108, 117, 115, 116, 101, 114, 47, 115, 112, 97, 114, 107, 45, 49, 46, 54, 46, 48, 45, 98, 105, 110, 45, 104, 97, 100, 111, 111, 112, 50, 46, 52, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112, 97, 114, 107, 47, 115, 113, 108, 47, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 112, 121, 113, 13, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 14, 77, 181, 5, 85, 0, 113, 15, 85, 1, 102, 113, 16, 85, 10, 114, 101, 116, 117, 114, 110, 84, 121, 112, 101, 113, 17, 134, 113, 18, 41, 116, 113, 19, 82, 113, 20, 134, 113, 21, 85, 3, 109, 97, 112, 113, 22, 133, 113, 23, 85, 1, 95, 113, 24, 85, 2, 105, 116, 113, 25, 134, 113, 26, 85, 78, 47, 85, 115, 101, 114, 115, 47, 106, 117, 97, 110, 103, 47, 99, 108, 117, 115, 116, 101, 114, 47, 115, 112, 97, 114, 107, 45, 49, 46, 54, 46, 48, 45, 98, 105, 110, 45, 104, 97, 100, 111, 111, 112, 50, 46, 52, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112, 97, 114, 107, 47, 115, 113, 108, 47, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 112, 121, 113, 27, 104, 14, 77, 181, 5, 104, 15, 104, 16, 104, 17, 134, 113, 28, 41, 116, 113, 29, 82, 113, 30, 93, 113, 31, 40, 104, 0, 40, 104, 1, 104, 5, 40, 75, 1, 75, 1, 75, 1, 75, 67, 85, 10, 124, 0, 0, 106, 0, 0, 131, 0, 0, 83, 113, 32, 78, 133, 113, 33, 85, 5, 117, 112, 112, 101, 114, 113, 34, 133, 113, 35, 85, 1, 115, 113, 36, 133, 113, 37, 85, 32, 60, 105, 112, 121, 116, 104, 111, 110, 45, 105, 110, 112, 117, 116, 45, 50, 54, 57, 45, 99, 101, 48, 50, 53, 49, 101, 56, 51, 102, 101, 100, 62, 113, 38, 104, 14, 75, 1, 85, 0, 113, 39, 41, 41, 116, 113, 40, 82, 113, 41, 93, 113, 42, 125, 113, 43, 135, 113, 44, 82, 113, 45, 125, 113, 46, 78, 125, 113, 47, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108, 46, 116, 121, 112, 101, 115, 10, 83, 116, 114, 105, 110, 103, 84, 121, 112, 101, 10, 113, 48, 41, 129, 113, 49, 125, 113, 50, 98, 101, 125, 113, 51, 135, 113, 52, 82, 113, 53, 125, 113, 54, 104, 22, 99, 105, 116, 101, 114, 116, 111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 55, 115, 78, 125, 113, 56, 116, 82, 78, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115, 10, 65, 117, 116, 111, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 57, 41, 129, 113, 58, 125, 113, 59, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122, 101, 113, 60, 75, 0, 85, 8, 98, 101, 115, 116, 83, 105, 122, 101, 113, 61, 74, 0, 0, 1, 0, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 62, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 63, 41, 129, 113, 64, 125, 113, 65, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 66, 137, 115, 98, 117, 98, 104, 58, 116, 113, 67, 46)
    val doubleCommand = toBytes(128, 2, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105, 99, 107, 108, 101, 10, 95, 102, 105, 108, 108, 95, 102, 117, 110, 99, 116, 105, 111, 110, 10, 113, 0, 40, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105, 99, 107, 108, 101, 10, 95, 109, 97, 107, 101, 95, 115, 107, 101, 108, 95, 102, 117, 110, 99, 10, 113, 1, 99, 112, 121, 115, 112, 97, 114, 107, 46, 99, 108, 111, 117, 100, 112, 105, 99, 107, 108, 101, 10, 95, 98, 117, 105, 108, 116, 105, 110, 95, 116, 121, 112, 101, 10, 113, 2, 85, 8, 67, 111, 100, 101, 84, 121, 112, 101, 113, 3, 133, 113, 4, 82, 113, 5, 40, 75, 2, 75, 2, 75, 3, 75, 19, 85, 25, 116, 0, 0, 135, 0, 0, 135, 1, 0, 102, 2, 0, 100, 1, 0, 134, 0, 0, 124, 1, 0, 131, 2, 0, 83, 113, 6, 78, 104, 5, 40, 75, 1, 75, 1, 75, 3, 75, 19, 85, 19, 136, 1, 0, 106, 0, 0, 136, 0, 0, 124, 0, 0, 140, 0, 0, 131, 1, 0, 83, 113, 7, 78, 133, 113, 8, 85, 10, 116, 111, 73, 110, 116, 101, 114, 110, 97, 108, 113, 9, 133, 113, 10, 85, 1, 120, 113, 11, 133, 113, 12, 85, 78, 47, 85, 115, 101, 114, 115, 47, 106, 117, 97, 110, 103, 47, 99, 108, 117, 115, 116, 101, 114, 47, 115, 112, 97, 114, 107, 45, 49, 46, 54, 46, 48, 45, 98, 105, 110, 45, 104, 97, 100, 111, 111, 112, 50, 46, 52, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112, 97, 114, 107, 47, 115, 113, 108, 47, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 112, 121, 113, 13, 85, 8, 60, 108, 97, 109, 98, 100, 97, 62, 113, 14, 77, 181, 5, 85, 0, 113, 15, 85, 1, 102, 113, 16, 85, 10, 114, 101, 116, 117, 114, 110, 84, 121, 112, 101, 113, 17, 134, 113, 18, 41, 116, 113, 19, 82, 113, 20, 134, 113, 21, 85, 3, 109, 97, 112, 113, 22, 133, 113, 23, 85, 1, 95, 113, 24, 85, 2, 105, 116, 113, 25, 134, 113, 26, 85, 78, 47, 85, 115, 101, 114, 115, 47, 106, 117, 97, 110, 103, 47, 99, 108, 117, 115, 116, 101, 114, 47, 115, 112, 97, 114, 107, 45, 49, 46, 54, 46, 48, 45, 98, 105, 110, 45, 104, 97, 100, 111, 111, 112, 50, 46, 52, 47, 112, 121, 116, 104, 111, 110, 47, 112, 121, 115, 112, 97, 114, 107, 47, 115, 113, 108, 47, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 112, 121, 113, 27, 104, 14, 77, 181, 5, 104, 15, 104, 16, 104, 17, 134, 113, 28, 41, 116, 113, 29, 82, 113, 30, 93, 113, 31, 40, 104, 0, 40, 104, 1, 104, 5, 40, 75, 1, 75, 1, 75, 2, 75, 67, 85, 8, 124, 0, 0, 124, 0, 0, 23, 83, 113, 32, 78, 133, 113, 33, 41, 85, 1, 115, 113, 34, 133, 113, 35, 85, 32, 60, 105, 112, 121, 116, 104, 111, 110, 45, 105, 110, 112, 117, 116, 45, 50, 55, 50, 45, 52, 57, 51, 97, 55, 99, 100, 97, 98, 52, 55, 57, 62, 113, 36, 104, 14, 75, 1, 85, 0, 113, 37, 41, 41, 116, 113, 38, 82, 113, 39, 93, 113, 40, 125, 113, 41, 135, 113, 42, 82, 113, 43, 125, 113, 44, 78, 125, 113, 45, 116, 82, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 113, 108, 46, 116, 121, 112, 101, 115, 10, 83, 116, 114, 105, 110, 103, 84, 121, 112, 101, 10, 113, 46, 41, 129, 113, 47, 125, 113, 48, 98, 101, 125, 113, 49, 135, 113, 50, 82, 113, 51, 125, 113, 52, 104, 22, 99, 105, 116, 101, 114, 116, 111, 111, 108, 115, 10, 105, 109, 97, 112, 10, 113, 53, 115, 78, 125, 113, 54, 116, 82, 78, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115, 10, 65, 117, 116, 111, 66, 97, 116, 99, 104, 101, 100, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 55, 41, 129, 113, 56, 125, 113, 57, 40, 85, 9, 98, 97, 116, 99, 104, 83, 105, 122, 101, 113, 58, 75, 0, 85, 8, 98, 101, 115, 116, 83, 105, 122, 101, 113, 59, 74, 0, 0, 1, 0, 85, 10, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 113, 60, 99, 112, 121, 115, 112, 97, 114, 107, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 115, 10, 80, 105, 99, 107, 108, 101, 83, 101, 114, 105, 97, 108, 105, 122, 101, 114, 10, 113, 61, 41, 129, 113, 62, 125, 113, 63, 85, 19, 95, 111, 110, 108, 121, 95, 119, 114, 105, 116, 101, 95, 115, 116, 114, 105, 110, 103, 115, 113, 64, 137, 115, 98, 117, 98, 104, 56, 116, 113, 65, 46)

    val upperUDF = UserDefinedPythonFunction(
      "<lambda>",
      upperCommand,
      new HashMap[String, String](),
      new ArrayList[String](),
      "python", "2.7", new ArrayList[Broadcast[PythonBroadcast]](), null, DataTypes.StringType)

    val doubleUDF = UserDefinedPythonFunction(
      "<lambda>",
      doubleCommand,
      new HashMap[String, String](),
      new ArrayList[String](),
      "python", "2.7", new ArrayList[Broadcast[PythonBroadcast]](), null, DataTypes.StringType)

    df.show()

//    val transformedDf = df.select(
//      upperUDF(df.col("f1")).alias("tf1"),
//      upperUDF(df.col("f2")).alias("tf2"),
//      doubleUDF(df.col("f3")).alias("tf3")
//    ).select(
//      F.col("tf1"),
//      F.col("tf2"),
//      F.lower(upperUDF(F.col("tf3")))
//    )

    val transformedDf = df.select(
      upperUDF(doubleUDF(df.col("f3"))).alias("tf3")
    )

    transformedDf.explain(true)
    transformedDf.show()
  }
}
